const { Router } = require("express");
const express = require("express")
const cors = require('cors');
const cookieParser = require('cookie-parser');
const Pizza = require("./modules/Items/Pizza.js");
const Snack = require("./modules/Items/Snack.js");
const Cart = require("./modules/Cart/Cart.js");
const Coctail = require('./modules/Items/Coctail.js')
const Drink = require('./modules/Items/Drink.js');
const User = require('./modules/User/User.js');
const Coffee = require("./modules/Items/Coffee.js");
const Dessert = require("./modules/Items/Dessert.js");
const Souse = require("./modules/Items/Souse.js");

const ServerData = {
    MainMenuItems: []
};

(async function LoadDataBase() {
    await Pizza.LoadPizzaBase();
    await Snack.LoadSnackBase();
    await Drink.LoadDrinkBase();
    await Coctail.LoadCoctailBase();
    await Coffee.LoadCoffeeBase();
    await Dessert.LoadDessertBase();
    await Souse.LoadSouseBase();
    await Cart.LoadCartBase();
    ServerData.MainMenuItems = [     
        ...Pizza.PizzaList,
        ...Snack.SnackList,
        ...Drink.DrinkList,
        ...Coctail.CoctailList,
        ...Coffee.CoffeelList,
        ...Dessert.DessertList,
        ...Souse.SouseList
    ]
}())

const router = Router();
const app = express();
const port = 3030;

app.use(cors());
app.use(function (req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', `http://127.0.0.1:5173`);
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    res.setHeader('Access-Control-Allow-Credentials', true);
    next();
});
app.use(cookieParser('sv3314gds34bastet43gs745kgh'));
app.use(router);

app.listen(port, () => {
    console.log(`–ü–æ—Ä—Ç ${port} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è.`)
});


app.get("/MainMenu", async (req, res) => {
    try {
        const result = {
            Items: ServerData.MainMenuItems,
            User: null
        }
        if (req.query.Cookie && req.query.Cookie.toString().includes(";")) {
            const cookiesObject = req.query.Cookie.split(';').reduce((acc, cookie) => {
                const [key, value] = cookie.trim().split('=');
                acc[key] = value;
                return acc;
            }, {});
            result.User = await User.LoggedInWithCookie(cookiesObject.login, cookiesObject.hash);
        }
        console.log("–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.");
        return res.send(result);
    }
    catch (e) {
        console.log("–û—à–∏–±–∫–∞.MainMenu: " + e);
    }
});

app.get("/ExitAccount", async (req, res) => {
    if (req.query.Cookie && req.query.Cookie.toString().includes(";")) {
        const cookiesObject = req.query.Cookie.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = value;
            return acc;
        }, {});
        const hashUser = await getHashByLogin(cookiesObject.login);
        if (cookiesObject.hash == hashUser) {
            const findedIndex = User.SignedUsers.findIndex(_ => _.Login == cookiesObject.login);
            if (findedIndex !== -1) {
                User.SignedUsers.splice(findedIndex, 0);
                res.clearCookie("hash");
                res.clearCookie("login");
                console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∞–π—Ç–∞, –∏ –æ–±—å–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω !");
                return res.send(JSON.stringify({
                    Result: "Success",
                    Notify: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ !",
                }));
            }
        }
    }
});

app.get("/Authorization", async (req, res) => {
    try {
        const query = req.query;
        if (query.length < 2) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ !",
            })
            return;
        }
        const { Login, Password } = req.query;
        const result = await User.LoggedIn(req, res, Login, Password);
        return res.send(result);
    }
    catch (e) {
        console.log("–û—à–∏–±–∫–∞.Authorization: " + e);
    }
});

app.get("/Registration", async (req, res) => {
    try {
        const query = req.query;
        if (query.length < 3) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ !",
            })
            return;
        }
        const { Login, Password, PhoneNumber, Name } = req.query;
        const result = await User.Register(Login, Name, PhoneNumber, Password, req.ip);
        return res.send(result);
    }
    catch (e) {
        console.log("–û—à–∏–±–∫–∞.Registration: " + e);
    }
});

app.get("/AddItemInCart", async (req, res) => {
    try {
        const query = req.query;
        if (query.length < 4) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ !",
            })
            return;
        }
        const { CattegoryType, ItemUUID, Login, PhoneNumber } = req.query;
        if (!CattegoryType || !ItemUUID || !Login || !PhoneNumber || Number.isNaN(Number(ItemUUID)) || Number.isNaN(Number(PhoneNumber))) {
            res.send({
                Result: "Error",
                Notify: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö !",
            })
            return;
        }
        const user = User.SignedUsers.find(_ => _.Login == Login && _.PhoneNumber == PhoneNumber);
        if (!user) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã !",
            })
            return;
        }
        const cart = Cart.UserCarts.find(_ => _.UUID == user.CartUUID);
        if (!cart) {
            res.send({
                Result: "Error",
                Notify: "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ !",
            })
            return;
        }
        const result = await cart.addItemInCart(CattegoryType, ItemUUID);
        return res.send(result);
    }
    catch (e) {
        console.log("–û—à–∏–±–∫–∞.AddItemInCart: " + e);
    }
});

app.get("/SetValueItemInCart", async (req, res) => {
    try {
        const query = req.query;
        if (query.length < 4) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ !",
            })
            return;
        }
        const { CattegoryType, ItemUUID, Login, PhoneNumber, Value } = req.query;
        if (!CattegoryType || !ItemUUID || !Login || !PhoneNumber || !Value || Number.isNaN(Number(ItemUUID))
            || Number.isNaN(Number(PhoneNumber)) || Number.isNaN(Number(Value))) {
            res.send({
                Result: "Error",
                Notify: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö !",
            })
            return;
        }
        const user = User.SignedUsers.find(_ => _.Login == Login && _.PhoneNumber == PhoneNumber);
        if (!user) {
            res.send({
                Result: "Error",
                Notify: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã !",
            })
            return;
        }
        const cart = Cart.UserCarts.find(_ => _.UUID == user.CartUUID);
        if (!cart) {
            res.send({
                Result: "Error",
                Notify: "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ !",
            })
            return;
        }
        const result = await cart.setValueItemInCart(CattegoryType, Number(ItemUUID), Number(Value));
        return res.send(result);
    }
    catch (e) {
        console.log("–û—à–∏–±–∫–∞.SetValueItemInCart: " + e);
    }
});

// const NewPizza = new Pizza("–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ üå±", 
//     "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ —Ç—Ä–∞–≤—ã, —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, —Ç–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞", [
//     {
//         Size: 25,
//         TypeDough: {
//             Default: { 
//                 Price: 11.99,
//                 Weight: 405
//             },
//         },
//     },
//     {
//         Size: 30,
//         TypeDough: {
//             Default: {
//                 Price: 20.99,
//                 Weight: 640
//             },
//             Thin: {
//                 Price: 20.99,
//                 Weight: 530
//             }
//         },
//     },
//     {
//         Size: 35,
//         TypeDough: {
//             Default: { 
//                 Price: 26.99,
//                 Weight: 860
//             },
//             Thin: {
//                 Price: 26.99,
//                 Weight: 760
//             }
//         },
//     },
// ], "Margarita");
// PoolQuerys.query(`INSERT INTO pizza (name, description, price, image) VALUES ('${NewPizza.Name}','${NewPizza.Description}','${JSON.stringify(NewPizza.Price)}','${NewPizza.Image}')`)







// const DrinkNew = new Drink("–ß–∞–π Lipton –∑–µ–ª–µ–Ω—ã–π", "GreenTeaLeapton", 
//     "", 1.79);
// PoolQuerys.query(`INSERT INTO drinks (name, description, price, image) `
// + `VALUES ('${DrinkNew.Name}','${DrinkNew.Description}',${DrinkNew.Price},'${DrinkNew.Image}')`)





// const CoctailNew = new Coctail(
//     "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å",
//     "IceCoctailChocolate",
//     "–û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —à–æ–∫–æ–ª–∞–¥–Ω–∞—è –Ω–µ–∂–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –∫–∞–∫–∞–æ –∏ –º–æ—Ä–æ–∂–µ–Ω—ã–º",
//     7.49
// );
// PoolQuerys.query(`INSERT INTO coctail (name, description, price, image) `
// + `VALUES ('${CoctailNew.Name}','${CoctailNew.Description}',${CoctailNew.Price},'${CoctailNew.Image}')`)


// const snack = new Snack(
//     "–°—ã—Ä–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ —Å –ø–µ—Å—Ç–æ",
//     "SirniePalochkiPesto", 
//     "–°—ã—Ç–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏. –ù–∞ –ø—ã—à–Ω–æ–º —Ç–µ—Å—Ç–µ —Ç–æ–ª—å–∫–æ –º–æ—Ü–∞—Ä–µ–ª–ª–∞ –∏ —Å–æ—É—Å –ø–µ—Å—Ç–æ. –í –∫–æ–º–ø–ª–µ–∫—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å ‚Äî —Ç–∞–∫ –≤–∫—É—Å–Ω–µ–µ",
//     8.99
// );
// PoolQuerys.query(`INSERT INTO snacks (name, description, price, image) `
// + `VALUES ('${snack.Name}','${snack.Description}',${snack.Price},'${snack.Image}')`)


// const coffee = new Coffee(
//     "–ö–æ—Ñ–µ –û—Ä–µ—Ö–æ–≤—ã–π –ª–∞—Ç—Ç–µ",
//     "OrehoviyLatte",
//     "–ú–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞ –∏ —Ñ—É–Ω–¥—É–∫–∞. –£—é—Ç–Ω—ã–π –æ—Ä–µ—Ö–æ–≤—ã–π –ª–∞—Ç—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–ø—Ä–µ—Å—Å–æ",
//     5.59
// );
// PoolQuerys.query(`INSERT INTO coffee (name, description, price, image) `
// + `VALUES ('${coffee.Name}','${coffee.Description}',${coffee.Price},'${coffee.Image}')`)


// const desser = new Dessert(
//     "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ –Æ–∫–∫–∏ –ü–ª–æ–º–±–∏—Ä –Ω–∞ —Å–ª–∏–≤–∫–∞—Ö",
//     "IceCreamYukkiPlombir",    
//     "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–æ–º–±–∏—Ä, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–≤–µ–∂–∏—Ö —Å–ª–∏–≤–∫–∞—Ö",
//     4.29
// );
// PoolQuerys.query(`INSERT INTO dessert (name, description, price, image) `
// + `VALUES ('${desser.Name}','${desser.Description}',${desser.Price},'${desser.Image}')`)

// const souse = new Souse(
//     "–°—ã—Ä–Ω—ã–π –°–æ—É—Å",
//     "Sirniy",
//     "–ù–µ–∂–Ω—ã–π —Å–æ—É—Å —Å–æ –≤–∫—É—Å–æ–º —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—ã—Ä–∞ –¥–ª—è –±–æ—Ä—Ç–∏–∫–æ–≤ –ø–∏—Ü—Ü—ã –∏ –≥–æ—Ä—è—á–∏—Ö –∑–∞–∫—É—Å–æ–∫, 25 –≥ –≥",
//     1.19
// )
// PoolQuerys.query(`INSERT INTO souses (name, description, price, image) `
// + `VALUES ('${souse.Name}','${souse.Description}',${souse.Price},'${souse.Image}')`)